#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int MDTC, MNTC;

// Definition Table to hold the macro definition
struct definitionTable {
    int index;
    char *definition;
    struct argumentListArray *arg[2]; // Assuming max 2 arguments
    struct definitionTable *next;
};

// Name Table that maps the macro name to its corresponding index in the Definition Table
struct nameTable {
    int index;
    char *name;
    struct definitionTable *dtIndex;
    struct nameTable *next;
};

// Argument List Array holds the arguments used in the macro definition
struct argumentListArray {
    int index;
    char *arg;
    struct argumentListArray *next;
};

// Table Pointers
struct definitionTable *dtHead = NULL;
struct nameTable *ntHead = NULL;
struct argumentListArray *alHead = NULL;

// Index for the argument list array
int alIndex = 1;

struct argumentListArray *findArgIndex(char *arg) {
    struct argumentListArray *temp = alHead;
    while (temp != NULL) {
        if (strcmp(temp->arg, arg) == 0) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

struct definitionTable *findName(char *name) {
    struct nameTable *temp = ntHead;
    while (temp != NULL) {
        if (strcmp(temp->name, name) == 0) {
            return temp->dtIndex;
        }
        temp = temp->next;
    }
    return NULL;
}

// Function to free the memory of the name table
void freeNameTable() {
    struct nameTable *temp;
    while (ntHead != NULL) {
        temp = ntHead;
        ntHead = ntHead->next;
        free(temp);
    }
}

// Function to free the memory of the definition table
void freeDefinitionTable() {
    struct definitionTable *temp;
    while (dtHead != NULL) {
        temp = dtHead;
        dtHead = dtHead->next;
        free(temp);
    }
}

// Function to free the memory of the argument list
void freeArgumentList() {
    struct argumentListArray *temp;
    while (alHead != NULL) {
        temp = alHead;
        alHead = alHead->next;
        free(temp);
    }
}

void pass1(FILE *fp) {
    MDTC = MNTC = 1;

    char *line;
    ssize_t read;
    size_t len = 0;
    struct definitionTable *dtTemp = dtHead;
    struct nameTable *ntTemp = ntHead;
    struct argumentListArray *alTemp = alHead;

    while ((read = getline(&line, &len, fp)) != -1) {
        if (strstr(line, "MACRO")) {
            // Process macro name
            char *tokens = strtok(line, " ");
            printf("\nMACRO %s Detected...\n", tokens);

            if (ntHead == NULL) {
                ntHead = (struct nameTable *)malloc(sizeof(struct nameTable));
                ntTemp = ntHead;
            } else {
                ntTemp->next = (struct nameTable *)malloc(sizeof(struct nameTable));
                ntTemp = ntTemp->next;
            }

            ntTemp->index = MNTC++;
            ntTemp->name = tokens;
            printf("%s added into Name Table\n", tokens);

            tokens = strtok(NULL, " ");
            while (tokens != NULL) {
                if (strcmp(tokens, "MACRO") != 0) {
                    if (alHead == NULL) {
                        alHead = (struct argumentListArray *)malloc(sizeof(struct argumentListArray));
                        alTemp = alHead;
                    } else {
                        alTemp->next = (struct argumentListArray *)malloc(sizeof(struct argumentListArray));
                        alTemp = alTemp->next;
                    }

                    alTemp->index = alIndex++;
                    alTemp->arg = tokens;
                    printf("Argument %s added into argument list array\n", alTemp->arg);
                }
                tokens = strtok(NULL, " ");
            }

            if (dtHead == NULL) {
                dtHead = (struct definitionTable *)malloc(sizeof(struct definitionTable));
                dtTemp = dtHead;
            } else {
                dtTemp->next = (struct definitionTable *)malloc(sizeof(struct definitionTable));
                dtTemp = dtTemp->next;
            }

            dtTemp->definition = ntTemp->name;
            printf("Definition table entry created for %s\n", ntTemp->name);
            ntTemp->dtIndex = dtTemp;

            read = getline(&line, &len, fp);
            while (strcmp(line, "MEND\n") != 0) {
                tokens = strtok(line, " ");
                int isArg = 0, index = 0;
                while (tokens != NULL) {
                    if (isArg == 0) {
                        dtTemp->next = (struct definitionTable *)malloc(sizeof(struct definitionTable));
                        dtTemp = dtTemp->next;
                        dtTemp->index = MDTC++;
                        dtTemp->definition = tokens;
                        printf("Entry appended for %s at index %d\n", dtTemp->definition, dtTemp->index);
                        isArg = 1;
                    } else {
                        if (findArgIndex(tokens) == NULL) {
                            alTemp->next = (struct argumentListArray *)malloc(sizeof(struct argumentListArray));
                            alTemp->next->index = alTemp->index + 1;
                            alTemp = alTemp->next;
                            alTemp->arg = tokens;
                            dtTemp->arg[index] = alTemp;
                        } else {
                            dtTemp->arg[index] = findArgIndex(tokens);
                        }
                        index++;
                    }
                    tokens = strtok(NULL, " ");
                }
                read = getline(&line, &len, fp);
            }
        }
    }
    fclose(fp);
    printf("\nAll three tables are updated. Pass 1 Complete!\n");
}

void pass2(FILE *fp) {
    char *line;
    ssize_t read;
    size_t len = 0;
    FILE *Ofp = fopen("output.txt", "a");

    while ((read = getline(&line, &len, fp)) != -1) {
        struct definitionTable *temp = findName(line);
        if (temp != NULL) {
            while (temp != NULL) {
                // Correct handling of arguments during macro expansion
                if (strcmp(temp->definition, "MEND") != 0) {
                    fprintf(Ofp, "-\t%s\t", temp->definition);
                    if (temp->arg[0] != NULL) {
                        fprintf(Ofp, "%s\t", temp->arg[0]->arg);
                    }
                    if (temp->arg[1] != NULL) {
                        fprintf(Ofp, "%s\t", temp->arg[1]->arg);
                    }
                    fprintf(Ofp, "\n");
                }
                temp = temp->next;
            }
        }
    }
    fclose(Ofp);
    printf("\nOutput file updated with expanded code. Pass 2 Complete!\n");
}

int main() {
    FILE *fp;
    fp = fopen("input.asm", "r");
    if (fp == NULL) {
        perror("\nFailed to open the assembly file!");
        exit(0);
    }

    printf("\nPass 1 in progress\n");
    pass1(fp);

    // Reopen the file for Pass 2
    fp = fopen("input.asm", "r");
    if (fp == NULL) {
        perror("\nFailed to reopen the assembly file for Pass 2!");
        exit(0);
    }

    printf("\nPass 2 in progress\n");
    pass2(fp);
    fclose(fp);

    // Free the allocated memory
    freeNameTable();
    freeDefinitionTable();
    freeArgumentList();

    return 0; // Return 0 to indicate successful execution
}
